// Firestore Rules for CTRLY CRM
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function role() { return request.auth.token.role; }
    function uid() { return request.auth.uid; }
    function orgId() { return request.auth.token.orgId; }

    // Each user can read/write their own user doc
    match /users/{userId} {
      allow read, write: if signedIn() && userId == uid();
    }

    // Profiles: created at signup; readable by the owner to approve; users can read their own
    match /profiles/{userId} {
      allow read: if signedIn() && (userId == uid() || role() == 'owner');
      allow write: if signedIn() && userId == uid();
    }

    // Projects and subcollections
    match /projects/{projectId} {
      allow read: if signedIn() && resource.data.orgId == orgId() && (
        role() in ['owner','admin','manager'] ||
        (role() in ['worker','client'] && (resource.data.members != null && resource.data.members.hasAny([uid()])))
      );
      allow create: if signedIn() && request.resource.data.orgId == orgId() && role() in ['owner','admin','manager'];
      allow update, delete: if signedIn() && resource.data.orgId == orgId() && (
        role() in ['owner','admin','manager'] ||
        (role() == 'worker' && resource.data.writers != null && resource.data.writers.hasAny([uid()]))
      );

      // Tasks under project
      match /tasks/{taskId} {
        allow read: if signedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.orgId == orgId() && (
          role() in ['owner','admin','manager'] ||
          (role() in ['worker','client'] && get(/databases/$(database)/documents/projects/$(projectId)).data.members.hasAny([uid()]))
        );
        allow create, update, delete: if signedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.orgId == orgId() && (
          role() in ['owner','admin','manager'] ||
          (role() == 'worker' && get(/databases/$(database)/documents/projects/$(projectId)).data.writers.hasAny([uid()]))
        );
      }

      // Tickets under project
      match /tickets/{ticketId} {
        allow read: if signedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.orgId == orgId() && (
          role() in ['owner','admin','manager'] ||
          (role() in ['worker','client'] && get(/databases/$(database)/documents/projects/$(projectId)).data.members.hasAny([uid()]))
        );
        allow create, update, delete: if signedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.orgId == orgId() && (
          role() in ['owner','admin','manager'] ||
          (role() == 'worker' && get(/databases/$(database)/documents/projects/$(projectId)).data.writers.hasAny([uid()]))
        );
      }
    }

    // Events (calendar): org-scoped
    match /events/{eventId} {
      allow read: if signedIn() && resource.data.orgId == orgId();
      allow create: if signedIn() && request.resource.data.orgId == orgId();
      allow update, delete: if signedIn() && resource.data.orgId == orgId() && (
        role() in ['owner','admin','manager'] || resource.data.createdBy == uid()
      );
    }

    // Chats: doc with participants array and orgId; messages subcollection
    match /chats/{chatId} {
      allow read, update, delete: if signedIn() && resource.data.orgId == orgId() && resource.data.participants.hasAny([uid()]);
      allow create: if signedIn() && request.resource.data.orgId == orgId() && request.resource.data.participants.hasAny([uid()]);
      match /messages/{messageId} {
        allow read: if signedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.orgId == orgId() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([uid()]);
        allow create: if signedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.orgId == orgId() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([uid()]) && request.resource.data.senderId == uid();
        allow update, delete: if false; // messages immutable
      }
    }
  }
}
